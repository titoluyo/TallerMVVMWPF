using System.ComponentModel.Composition;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using Microsoft.Practices.Prism.Regions;
using WPFPrismv4Navigation.Constants;
using WPFPrismv4Navigation.Infrastructure;
using System;

namespace WPFPrismv4Navigation.UI {

    /// <summary>
    /// The Export attribute does not use a name like the other views need.  <see cref="ItemView"/>.
    /// The reason for this is because this view is never naviagted to, instead it is created in the
    /// application <see cref="Bootstrapper"/>.
    /// 
    /// Also of note is the CreationPolicy that is set to Shared, since there will only ever be one
    /// instance of this type.  This is the default value, but is specified here to make the code
    /// easier to read.
    /// </summary>
    [Export]
    [PartCreationPolicy(CreationPolicy.Shared)]
    public partial class ShellView : Window {

        [Import]
        public IRegionManager RegionManager { get; set; }

        [Import]
        Logger Logger { get; set; }

        /// <summary>
        /// Gets or sets the <see cref="ShellViewModel"/>.
        /// This is the recommended technique for wiring up a View's ViewModel.
        /// This technique is Designer friendly and works when using MEF or an IOC container.
        /// 
        /// In a typical WPF or Silverlight ViewModel style application, this is usually the only code
        /// in addition to the constructor in the code-behind.
        /// 
        /// When using this technique, provide a good design-time experience in the XAML
        /// by using either d:DataContext, d:DesignSource assigning d:DesignInstance or d:DesignData
        /// </summary>
        [Import]
        ShellViewModel ShellViewModel {
            get { return this.DataContext as ShellViewModel; }
            set { this.DataContext = value; }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ShellView"/> class.
        /// </summary>
        public ShellView() {
            InitializeComponent();
            this.Loaded += ShellView_Loaded;

            //since the DataGrid is using AutoGenereatedColumns, this code hides the last column since the
            //user does need to see it
            this.dg.AutoGeneratedColumns += (s, e) => { this.dg.Columns[5].Visibility = Visibility.Collapsed; };
        }

        /// <summary>
        /// Handles the Loaded event of the ShellView control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        void ShellView_Loaded(object sender, RoutedEventArgs e) {
            //after the shell is loaded, wire up the Navigated event so that we can be notified and also scroll the DataGrid to
            //the last item.
            this.RegionManager.Regions[RegionNames.MainContentRegion].NavigationService.Navigated += NavigationService_Navigated;
            this.RegionManager.Regions[RegionNames.MainContentRegion].NavigationService.Navigating += NavigationService_Navigating;
            this.RegionManager.Regions[RegionNames.MainContentRegion].NavigationService.NavigationFailed += NavigationService_NavigationFailed;
        }

        void NavigationService_Navigating(object sender, RegionNavigationEventArgs e) {
            this.Logger.Log(Global.RegionNavigatingTo + e.Uri.ToString());
        }

        /// <summary>
        /// Handles the NavigationFailed event of the NavigationService.
        /// 
        /// Developers you can use this event handler to display all your navigation failures to the user.
        /// This is very helpful when your application initiates navigation from XAML.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs"/> instance containing the event data.</param>
        void NavigationService_NavigationFailed(object sender, RegionNavigationFailedEventArgs e) {
            this.Logger.Log(Global.RegionNavigationFailed + e.Uri.ToString());

            // Demo only. Use a dialog service or interaction request instead of a message box
            MessageBox.Show(String.Format(Global.NavigationFailedMessage_FormatString, e.Uri, e.Error.Message), Global.NavigationError, MessageBoxButton.OK, MessageBoxImage.Error);
        }

        /// <summary>
        /// Handles the Navigated event of the NavigationService.
        /// 
        /// This method also scrolls the DataGrid to the last item after each
        /// navigation request is completed
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="Microsoft.Practices.Prism.Regions.RegionNavigationEventArgs"/> instance containing the event data.</param>
        void NavigationService_Navigated(object sender, RegionNavigationEventArgs e) {
            this.Logger.Log(Global.RegionNavigatedTo + e.Uri.ToString());

            //HACK how to scroll a DataGrid to the last item
            if(dg.Items.Count > 0) {
                var border = VisualTreeHelper.GetChild(dg, 0) as Decorator;
                if(border != null) {
                    var scroll = border.Child as ScrollViewer;
                    if(scroll != null) {
                        scroll.ScrollToEnd();
                    }
                }
            }
        }
    }
}


