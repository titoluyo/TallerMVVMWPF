<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:SFChallenge_Controls="clr-namespace:SFChallenge.Controls;assembly=SFChallenge.Controls" 
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:SFChallenge_Converters="clr-namespace:SFChallenge.Converters" 
                    xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing" 
                    mc:Ignorable="d">	


	<Style TargetType="{x:Type ListBoxItem}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Background" Value="White" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid SnapsToDevicePixels="true" >
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition From="Normal" GeneratedDuration="0" To="MouseOver">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
									<VisualTransition From="MouseOver" GeneratedDuration="0" To="Normal">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimation Duration="0" To="#FF787878" Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentPresenter"/>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0" To="Selected">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedUnfocusedBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
									<VisualTransition GeneratedDuration="0" To="Unselected">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedUnfocusedBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
									<VisualTransition GeneratedDuration="0" To="SelectedUnfocused">
										<Storyboard>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedUnfocusedBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unselected"/>
								<VisualState x:Name="Selected">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="SelectedUnfocused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="SelectedUnfocusedBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
                        <!-- This transparent border allows drag and drop to work properly vs. using Margin -->
						<Border BorderThickness="2" BorderBrush="Transparent" IsHitTestVisible="True" Background="Transparent" SnapsToDevicePixels="True">
							<Grid>
								<Border x:Name="NormalBorder" BorderThickness="1,1,1,1" BorderBrush="#FFD9D9D9" Background="White" SnapsToDevicePixels="True" />
								<Border x:Name="SelectedUnfocusedBorder" BorderThickness="2" BorderBrush="Orange" SnapsToDevicePixels="True" Opacity="0" Background="#FFFFC862" />
								<Border x:Name="SelectedBorder" BorderThickness="2" BorderBrush="Orange" SnapsToDevicePixels="True" Opacity="0" Background="#FFFFC862" />
								<Border x:Name="MouseOverBorder" BorderThickness="1,1,1,1" BorderBrush="#FF666666" Background="#4CFFA500" SnapsToDevicePixels="True" Opacity="0" />
								<ContentPresenter x:Name="ContentPresenter" Margin="1"/>
								<Border x:Name="DisabledBorder" BorderThickness="1,1,1,1" BorderBrush="#FF787878" Background="#FF333333" SnapsToDevicePixels="True" Opacity="0" />
							</Grid>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="MinHeight" Value="0"/>
		<Setter Property="MinWidth" Value="0"/>
	</Style>
	<Style TargetType="{x:Type ListBox}">
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
        <!--<Setter Property="ItemContainerStyle" Value="{DynamicResource ListBoxItem-sterling}" />-->
		<Setter Property="Background" Value="#33FFFFFF" />
		<Setter Property="Foreground" Value="Black" />
		<Setter Property="BorderBrush" Value="#FFD9D9D9" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="2,2,3,2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" >
						<ScrollViewer Padding="{TemplateBinding Padding}" Focusable="False" >
							<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
					</Border>
                    <!-- There are not VSM states, so I must use triggers -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false"/>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="true">
							<Setter Property="BorderBrush" Value="#FF999999"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="MinHeight" Value="0"/>
	</Style>

	<DataTemplate x:Key="SuperPersonItemTemplate">
		<Grid Margin="2">
			<SFChallenge_Controls:SuperPersonControl SuperPerson="{Binding ., Mode=OneWay}" />            
		</Grid>
	</DataTemplate>

	<Style TargetType="{x:Type SFChallenge_Controls:SuperPersonControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type SFChallenge_Controls:SuperPersonControl}">
					<Grid DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}">
						<Grid.Resources>
							<SFChallenge_Converters:SuperPersonImagePathConverter x:Key="SuperPersonImagePathConverter"/>
							<SFChallenge_Converters:BooleanVisibilityConverter x:Key="BooleanToVisibilityConverter" WhenTrue="Hidden" WhenFalse="Visible" WhenNull="Hidden"/>
						</Grid.Resources>
						<Grid.RowDefinitions>
							<RowDefinition />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<Viewbox>
							<Image Source="{Binding SuperPerson, Converter={StaticResource SuperPersonImagePathConverter}}" Stretch="None" />
						</Viewbox>
						<TextBlock Text="{Binding SuperPerson.Name, Mode=OneWay}" Grid.Row="1" HorizontalAlignment="Center" Margin="0,2" />
						<Viewbox Opacity="0.45" Visibility="{Binding SuperPerson.IsAlive, Converter={StaticResource BooleanToVisibilityConverter}}">
							<Canvas Height="46.75" Width="44.25" HorizontalAlignment="Center" VerticalAlignment="Center">
								<Path Data="M33,8 L33,59" Fill="Red" Height="52" Canvas.Left="18" Stretch="Fill" Canvas.Top="-2" Width="10" RenderTransformOrigin="0.5,0.5" StrokeThickness="10">
									<Path.Stroke>
										<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
											<GradientStop Color="Red" Offset="0.192"/>
											<GradientStop Color="#FF810000" Offset="1"/>
											<GradientStop Color="#FFFDA6A6"/>
											<GradientStop Color="Red" Offset="0.693"/>
										</LinearGradientBrush>
									</Path.Stroke>
									<Path.RenderTransform>
										<TransformGroup>
											<ScaleTransform/>
											<SkewTransform/>
											<RotateTransform Angle="-45"/>
											<TranslateTransform/>
										</TransformGroup>
									</Path.RenderTransform>
								</Path>
								<Path Data="M33,8 L33,59" Fill="Red" Height="52" Canvas.Left="18" Stretch="Fill" Canvas.Top="-1.5" Width="10" RenderTransformOrigin="0.5,0.5" StrokeThickness="10">
									<Path.Stroke>
										<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
											<GradientStop Color="Red" Offset="0.192"/>
											<GradientStop Color="#FF810000" Offset="1"/>
											<GradientStop Color="#FFFDA6A6"/>
											<GradientStop Color="Red" Offset="0.693"/>
										</LinearGradientBrush>
									</Path.Stroke>
									<Path.RenderTransform>
										<TransformGroup>
											<ScaleTransform/>
											<SkewTransform/>
											<RotateTransform Angle="45"/>
											<TranslateTransform/>
										</TransformGroup>
									</Path.RenderTransform>
								</Path>
							</Canvas>
						</Viewbox>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Width" Value="100"/>
		<Setter Property="Height" Value="100"/>
	</Style>

	<Style TargetType="{x:Type SFChallenge_Controls:MainViewControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type SFChallenge_Controls:MainViewControl}">
					<Border Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}" d:DesignWidth="1009.84" d:DesignHeight="567">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition/>
								<ColumnDefinition/>
							</Grid.ColumnDefinitions>
							<Viewbox HorizontalAlignment="Stretch" Grid.RowSpan="1" >
								<Image Source="Images/Hall of Justice.png"/>
							</Viewbox>
							<Viewbox Grid.Column="1" Grid.Row="0" Stretch="Uniform" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.RowSpan="1">
								<Image Source="Images/Hall of Doom.png"/>
							</Viewbox>
							<Grid DataContext="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" d:LayoutOverrides="Width, Height" Grid.ColumnSpan="2">                            
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto"/>                                
									<ColumnDefinition/>                                
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
                                <ListBox x:Name="SuperFriendsListBox" Grid.Row="0"  SelectedItem="{Binding Arena.CurrentHero}"  ItemsSource="{Binding Arena.Heroes}" ItemTemplate="{StaticResource SuperPersonItemTemplate}" HorizontalAlignment="Left" Grid.RowSpan="3"/>
								<Grid Grid.Column="1" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0">
									<Grid.RowDefinitions>
										<RowDefinition/>
										<RowDefinition Height="Auto"/>
									</Grid.RowDefinitions>
									<Grid.ColumnDefinitions>
										<ColumnDefinition />
										<ColumnDefinition Width="Auto"/>
										<ColumnDefinition />
									</Grid.ColumnDefinitions>
									<Border Grid.Column="0" BorderBrush="#FFCE890A" BorderThickness="4" CornerRadius="2" Background="#66FFFFFF" Padding="10" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0">
                                        <SFChallenge_Controls:SuperPersonControl SuperPerson="{Binding Arena.CurrentHero, Mode=OneWay}" Height="120" Width="120" />
									</Border>
                                    <ProgressBar Height="10" Grid.Row="1" Background="{x:Null}" BorderBrush="Black" Maximum="1000" Value="{Binding Arena.CurrentHero.Health, Mode=OneWay}"/>
									<Button Content="Fight!" Command="{Binding Fight}" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Width="120" Height="100" Grid.ColumnSpan="1" Margin="25,0" Style="{DynamicResource FightButton}" Foreground="White" FontSize="24" FontFamily="Showcard Gothic" FontStyle="Italic"/>
									<Border Grid.Column="2" BorderBrush="#FFCE890A" BorderThickness="4" CornerRadius="2" Background="#66FFFFFF" Padding="10" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0" >
                                        <SFChallenge_Controls:SuperPersonControl SuperPerson="{Binding Arena.CurrentVillian, Mode=OneWay}" Width="120" Height="120" />
									</Border>
                                    <ProgressBar Height="10" Grid.Row="1" Grid.Column="2" Background="{x:Null}" BorderBrush="Black" Maximum="1000"  Value="{Binding Arena.CurrentVillian.Health, Mode=OneWay}" RenderTransformOrigin="0.5,0.5">
										<ProgressBar.RenderTransform>
											<TransformGroup>
												<ScaleTransform ScaleY="1" ScaleX="-1"/>
												<SkewTransform AngleY="0" AngleX="0"/>
												<RotateTransform Angle="0"/>
												<TranslateTransform/>
											</TransformGroup>
										</ProgressBar.RenderTransform>
									</ProgressBar>
								</Grid>
                                <ListBox x:Name="LegionOfDoomListBox" Grid.Row="0" SelectedItem="{Binding Arena.CurrentVillian}"  ItemsSource="{Binding Arena.Villians}" ItemTemplate="{StaticResource SuperPersonItemTemplate}" Grid.Column="2" HorizontalAlignment="Right" Grid.RowSpan="3"/>
								<TextBox x:Name="PART_FightLogTextBox" Grid.Row="2" Width="600" Height="100" Grid.Column="1" VerticalScrollBarVisibility="Visible" IsReadOnly="True" AcceptsReturn="True" Background="#CCFFFFFF" Foreground="Black"/>
								<Button Content="Reset" Command="{Binding Reset}" Grid.Column="1" HorizontalAlignment="Right" Width="75" Height="25" Margin="0,0,5,0"/>
							</Grid>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="FightButton" TargetType="{x:Type Button}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Foreground" Value="White"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid d:DesignWidth="270" d:DesignHeight="202">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="NormalBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="MouseOverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="PressedBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="DisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="NormalBorder" BorderBrush="{x:Null}" d:IsHidden="True" Opacity="1">
							<ed:RegularPolygon Fill="#FDDA8D01" InnerRadius="0.762" PointCount="20" Stretch="Fill" StrokeThickness="3" Stroke="#FFFFBB00"/>
						</Border>
						<Border x:Name="MouseOverBorder" BorderBrush="{x:Null}" Margin="1" Opacity="0">
							<ed:RegularPolygon Fill="#FDDABE01" InnerRadius="0.762" PointCount="20" Stretch="Fill" StrokeThickness="3" Stroke="Orange" Margin="0,0,-2,-2"/>
						</Border>
						<Border x:Name="PressedBorder" BorderBrush="{x:Null}" d:IsHidden="True" Opacity="0">
							<ed:RegularPolygon Fill="#FDDA7801" InnerRadius="0.762" PointCount="20" Stretch="Fill" StrokeThickness="3" Stroke="#FF9B0000"/>
						</Border>
						<Border x:Name="DisabledBorder" BorderBrush="{x:Null}" d:IsHidden="True" Opacity="0">
							<ed:RegularPolygon Fill="#FD6E6E6E" InnerRadius="0.762" PointCount="20" Stretch="Fill" StrokeThickness="3" Stroke="DarkGray"/>
						</Border>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true"/>
						<Trigger Property="ToggleButton.IsChecked" Value="true"/>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="#ADADAD"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>